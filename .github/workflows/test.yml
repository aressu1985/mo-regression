
name: Regression Test on Distributed Mode TKE

on:
  #schedule:
  #  - cron: '0 16 * * *'
  workflow_dispatch:
    inputs:
      Repo:
        required: true
        default: 'matrixorigin/matrixone'
        type: string
      Ref:
        required: true
        default: '3dc20d48286509a91529233019ce70a5af79b1ee'
        type: string
      Image:
        required: true
        default: 'temp-nightly-723075e'
        type: string

jobs:
  setup_mo_test_env:
    runs-on: self-hosted
    timeout-minutes: 60
    name: SETUP MO TEST ENV
    steps:
      - name: Clone mo-auto-test Repo
        uses: actions/checkout@v2
        with:
          repository: aressu1985/mo-regression
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2

      - name: Prepare Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install
           
      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-reg|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-reg;kubectl -n mo-reg create secret generic aws-auto --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 
       
      - name: Clean EKS ENV
        run: |
          export KUBECONFIG=$(pwd)/tke-ci
          if [ "$(kubectl -n mo-reg get pod|grep "mo-reg-*"|wc -l)" -ne 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl -n mo-reg delete -f $GITHUB_WORKSPACE/mo-auto-test/mo-reg.yaml;sleep 30s;fi

      - name: ECHO mo-reg.yaml
        run: |
          echo '${{ needs.docker-image-build.outputs.version }}'
          sed -i "s/imagetag/${{ inputs.Image }}/" $GITHUB_WORKSPACE/mo-auto-test/mo-reg.yaml
          cat $GITHUB_WORKSPACE/mo-auto-test/mo-reg.yaml 
          
      - name: Create MO Cluster
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          while true; do if [ "$(kubectl -n mo-reg get pod|grep "job-bucket-*"| wc -l)" -eq 0 ]; then break; else sleep 10s; continue; fi; done
          kubectl -n mo-reg apply -f $GITHUB_WORKSPACE/mo-auto-test/mo-reg.yaml
          sleep 100s
          while true; do if [ "$(kubectl -n mo-reg get pods --field-selector status.phase=Running|grep "mo-reg-*"|wc -l)" -eq 6 ]; then break; else sleep 10s; continue; fi; done
          kubectl -n mo-reg get pod
          if [ ! -d $GITHUB_WORKSPACE/mo-server-log ]; then mkdir $GITHUB_WORKSPACE/mo-server-log;fi;

  build_verification_test:
    if: ${{ always() && !cancelled() }}
    name: Build Verification Test
    runs-on: x86-runner
    timeout-minutes: 30
    needs: [setup_mo_test_env]
    steps:        
      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl
          
      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install
                   
      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF 
           
      - name: Set up JDK 8 for x64
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64  
      
      - name: prepare env
        run: |
          cd $GITHUB_WORKSPACE
          mkdir heads
      
      - name: clone ${{ inputs.Repo }} repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.Repo }}
          path: ./heads/${{ inputs.Repo }}
          ref: ${{ inputs.Ref }}
          
      - name: clone mo-tester repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-tester
          path: ./mo-tester
          ref: main    
          
      - name: alter mo-tester addr   
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           export add_ip=$(kubectl -n mo-reg get svc | grep "6001/TCP"|awk '{print $3}')
           sed -i "s/127.0.0.1:6001/${add_ip}:6001/" $GITHUB_WORKSPACE/mo-tester/mo.yml
           sed -i "s/60000/300000/" $GITHUB_WORKSPACE/mo-tester/mo.yml
           cat $GITHUB_WORKSPACE/mo-tester/mo.yml    
          
      - name: cn-0 pod prepare data
        run: |
            aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
            export KUBECONFIG=$(pwd)/eks-ci
            tp_cn_0_pod=$(kubectl -n mo-reg get pod -l matrixorigin.io/component=CNSet -o wide| awk 'NR==2 {print $1}')
            kubectl exec -it ${tp_cn_0_pod} -n mo-reg -- /bin/sh<<EOF
            apt-get update
            apt-get install git vim net-tools mysql-client openjdk-8-jdk -y
            git clone https://github.com/${{ inputs.Repo }}.git
            cd matrixone
            git reset --hard ${{ inputs.Ref }}
            exit
            EOF
            exit
           
      - name: cn-1 pod prepare data
        run: |
            aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
            export KUBECONFIG=$(pwd)/eks-ci
            tp_cn_1_pod=$(kubectl -n mo-reg get pod -l matrixorigin.io/component=CNSet -o wide| awk 'NR==3 {print $1}')
            kubectl exec -it ${tp_cn_1_pod} -n mo-reg -- /bin/sh<<EOF
            apt-get update
            apt-get install git vim net-tools mysql-client openjdk-8-jdk -y
            git clone https://github.com/${{ inputs.Repo }}.git
            cd matrixone
            git reset --hard ${{ inputs.Ref }}
            exit
            EOF
            exit
         
      - name: Start BVT Test
        run: |
           export LC_ALL="C.UTF-8"
           locale
           cd $GITHUB_WORKSPACE/mo-tester
           ./run.sh -n -g -p $GITHUB_WORKSPACE/heads/${{ inputs.Repo }}/test/distributed/cases -s /matrixone/test/distributed/resources 2>&1     
    
  ssb_benchmark_test:
    if: ${{ always() && !cancelled() }}
    name: SSB BENCHMARK TEST
    runs-on: x86-runner
    timeout-minutes: 30
    needs: [setup_mo_test_env,build_verification_test]
    steps:
      - name: Clone mo-ssb Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-ssb
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-ssb
          ref: main

      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-auto-test Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-auto-test
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-reg|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-reg;kubectl -n mo-reg create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-reg get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Start Load SSB 10G Data
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/ssb_10 -r -m -g
          sleep 180s

      - name: Start SSB 10G multi table Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-ssb
          ./run.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -q all -s 10 -t 5

  tpch_benchmark_test:
    if: ${{ always() && !cancelled() }}
    name: TPCH BENCHMARK TEST
    runs-on: x86-runner
    timeout-minutes: 30
    needs: [setup_mo_test_env,build_verification_test,ssb_benchmark_test]
    steps:
      - name: Clone mo-tpch Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-tpch
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-tpch
          ref: main

      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-auto-test
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-reg|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-reg;kubectl -n mo-reg create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-reg get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Load TPCH 10G Test Data
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/tpch_10 -r -m -g
          sleep 180s

      - name: Start TPCH 10G Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          cd $GITHUB_WORKSPACE/mo-tpch
          ./run.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -q all -s 10 -t 5

  oltp_all_test:
    if: ${{ always() && !cancelled() }}
    name: SYSBENCH OLTP TEST
    runs-on: x86-runner
    timeout-minutes: 30
    needs: [setup_mo_test_env,build_verification_test,ssb_benchmark_test,tpch_benchmark_test]
    steps:
      - name: Clone mo-load Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load
          ref: main

      - name: Clone mo-sysbench Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-sysbench
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-sysbench
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-auto-test
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
          aws configure<<EOF
          ${{ secrets.ACCESSKEY_ID }}
          ${{ secrets.SECRETACCESS_KEY }}
          us-west-2
          json
          exit
          EOF

      - name: Prepare Kubeconfig
        run: |
          aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
          export KUBECONFIG=$(pwd)/eks-ci
          if [ "$(kubectl get namespaces|grep mo-reg|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-reg;kubectl -n mo-reg create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-reg get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2
          
          cd $GITHUB_WORKSPACE/mo-load
          sed -i 's/127.0.0.1/${{ steps.get_mo_addr.outputs.mo_svc_ip }}/g' mo.yml

      - name: Start OLTP Point Select Test With 100 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000
          sleep 10
          
          echo ''        
          ./start.sh -c cases/sysbench/point_select_10_100000 -t 100 -d 5 -g

      - name: Start OLTP Update Test With 100 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000
          sleep 10
          
          echo ''        
          ./start.sh -c cases/sysbench/update_pk_10_100000 -t 100 -d 5 -g

      - name: Start OLTP Insert Test With 100 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000
          sleep 10
          
          echo ''        
          ./start.sh -c cases/sysbench/simple_insert_10_100000 -t 100 -d 5 -g

      - name: Start OLTP Delete Test With 100 Threads
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load
          echo 'Start Prepare Data of 10-tables-100000-per-table'
          ./start.sh -m SYSBENCH -n 10 -s 100000
          sleep 10
          
          echo ''        
          ./start.sh -c cases/sysbench/delete_pk_10_100000 -t 100 -d 5 -g

  tpcc_benchmark_test:
    if: ${{ always() && !cancelled() }}
    name: TPCC BENCHMARK TEST
    runs-on: x86-runner
    timeout-minutes: 30
    needs: [setup_mo_test_env,build_verification_test,ssb_benchmark_test,tpch_benchmark_test,oltp_all_test]
    steps:
      - name: Clone mo-tpcc Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-tpcc
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-tpcc
          ref: main

      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-auto-test
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-reg|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-reg;kubectl -n mo-reg create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-reg get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Load TPCC 10 Warehouse Data
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/tpcc_10 -r -m -g

      - name: Start TPCC 10 Warehouses 10 terminals Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-tpcc
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=10' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i 's/127.0.0.1/${{ steps.get_mo_addr.outputs.mo_svc_ip }}/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          ./runBenchmark.sh props_10.mo
          ./runVerify.sh props_10.mo


      - name: Start TPCC 10 Warehouses 50 terminals Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-tpcc
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=50' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i 's/127.0.0.1/${{ steps.get_mo_addr.outputs.mo_svc_ip }}/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          ./runBenchmark.sh props_10.mo
          ./runVerify.sh props_10.mo

      - name: Start TPCC 10 Warehouses 100 terminals Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          locale
          cd $GITHUB_WORKSPACE/mo-tpcc
          cp props.mo props_10.mo
          sed -i '/.*terminals=*/c\terminals=100' props_10.mo
          sed -i '/.*warehouses=*/c\warehouses=10' props_10.mo
          sed -i 's/tpcc/tpcc_10/g' props_10.mo
          sed -i 's/127.0.0.1/${{ steps.get_mo_addr.outputs.mo_svc_ip }}/g' props_10.mo
          sed -i '/runMins=*/c\runMins=5' props_10.mo
          ./runBenchmark.sh props_10.mo
          ./runVerify.sh props_10.mo
          
  load_data_test:
    if: ${{ always() && !cancelled() }}
    name: LOAD DATA TEST
    runs-on: x86-runner
    timeout-minutes: 30
    needs: [setup_mo_test_env,build_verification_test,ssb_benchmark_test,tpch_benchmark_test,oltp_all_test,tpcc_benchmark_test]
    steps:
      - name: Clone mo-load-data Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-load-data
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-load-data
          ref: main

      - name: Clone mo-autotest Repo
        uses: actions/checkout@v2
        with:
          repository: matrixorigin/mo-auto-test
          token: ${{secrets.TOOL_REPO_TOKEN}}
          path: ./mo-auto-test
          ref: main

      - name: Prepare Test EVN
        run: |
          sudo apt-get update
          sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y
          sudo pip3 install PyYAML==6.0
          sudo pip3 install shyaml==0.6.2
          sudo pip3 install PyMySQL==1.0.2

      - name: Prepare AWS Tools
        run: |
          sudo apt-get update && sudo apt-get install awscli -y 
          sudo apt-get install -y ca-certificates curl

      - name: Prepare AWS Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.6'
        id: install

      - name: Prepare AWS Config
        run: |
           aws configure<<EOF
           ${{ secrets.ACCESSKEY_ID }}
           ${{ secrets.SECRETACCESS_KEY }}
           us-west-2
           json
           exit
           EOF

      - name: Prepare Kubeconfig
        run: |
           aws eks --region us-west-2 update-kubeconfig --name eks-ci --kubeconfig eks-ci
           export KUBECONFIG=$(pwd)/eks-ci
           if [ "$(kubectl get namespaces|grep mo-reg|wc -l)" -eq 0 ];then export KUBECONFIG=$(pwd)/eks-ci; kubectl create namespace mo-reg;kubectl -n mo-reg create secret generic aws-regression --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.ACCESSKEY_ID }} --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.SECRETACCESS_KEY }};fi 

      - name: Get MO Cluster Addr
        id: get_mo_addr
        run: |
          export KUBECONFIG=$(pwd)/eks-ci
          mo_svc_ip=$(kubectl -n mo-reg get svc | grep "6001/TCP"|awk '{print $3}')
          echo $mo_svc_ip
          echo ::set-output name=mo_svc_ip::${mo_svc_ip}

      - name: Start LOAD DATA 20 Columns Test
        if: ${{ always() && !cancelled() }}
        run: |
          export LC_ALL="C.UTF-8"
          echo mo_svc_ip=${{ steps.get_mo_addr.outputs.mo_svc_ip }}
          cd $GITHUB_WORKSPACE/mo-load-data
          ./load.sh -h ${{ steps.get_mo_addr.outputs.mo_svc_ip }} -c cases/00_from_s3/20_columns/ -r -m -g
